#!/bin/bash
set -euo pipefail

db_bkp_docker_clean() {
    db_bkp_msg "$d: db_bkp_docker_clean"
    if type docker >& /dev/null; then
        # Clean dangling images
        docker rmi $(docker images --filter dangling=true -q || true) >& /dev/null || true
    fi
}

db_bkp_main() {
    local f d
    local date=$(date +%Y%m%d%H%M%S)
    for f in '{{ rsconf_db.host_run_d }}'/*/'{{ db_bkp.script_name }}'; do
        d="$(dirname "$f")/{{ db_bkp.subdir_name }}/$date"
        db_bkp_msg "$d: begin"
        db_bkp_mkdir_and_run "$d" "$f"
        db_bkp_trim "$(dirname "$d")"
        db_bkp_msg "$d: end"
    done
    db_bkp_docker_clean
    db_bkp_msg done
}

db_bkp_mkdir_and_run() {
    local d=$1
    local f=$2
    db_bkp_msg "$d: db_bkp_mkdir_and_run"
    eval local $(stat --printf="g='%G' u='%U'" "$f")
    # directory owned by script
    install -m 700 -o "$u" -g "$g"  -d "$d"
    # however, run as root, because may need to "docker exec"
    if ! (cd "$d" && source "$f"); then
        db_bkp_msg "$d: ERROR"
    fi
}

db_bkp_msg() {
    echo "$@" 1>&2
}

db_bkp_trim() {
    local d=$1
    local dirs=( $(ls -dr "$d"/20*[0-9]) )
    db_bkp_msg "$d: db_bkp_trim"
    for d in "${dirs[@]:{{ db_bkp.max_copies }}}"; do
        db_bkp_msg "rmdir: $d"
        rm -rf "$d"
    done
}

db_bkp_main "$@"
