# -*-python-*-
import binascii
import grp
import jupyter_client.localinterfaces
import os
import os.path
import pwd

c.Authenticator.admin_users = set([{{ jupyterhub.admin_users_str }}])
{% if 'whitelist_users_str' in jupyterhub %}
c.Authenticator.whitelist = set([{{ jupyterhub.whitelist_users_str }}])
{% endif %}
{% if 'github' in jupyterhub %}
c.JupyterHub.authenticator_class = 'oauthenticator.GitHubOAuthenticator'
c.GitHubOAuthenticator.client_id = '{{ jupyterhub.github.client_id }}'
c.GitHubOAuthenticator.client_secret = '{{ jupyterhub.github.client_secret }}'
c.GitHubOAuthenticator.oauth_callback_url = 'https://{{ jupyterhub.vhost }}/hub/oauth_callback'
{% else %}
assert '{{ rsconf_db.channel }}' == 'dev', \
    'development only; all other channels must use GitHubOAuthenticator'
c.JupyterHub.authenticator_class = 'jupyterhub.auth.PAMAuthenticator'
import subprocess
subprocess.check_call('echo {{ jupyterhub.jupyter_run_u }}:testpass|chpasswd', shell=True)
{% endif %}

c.JupyterHub.confirm_no_ssl = True
c.JupyterHub.cookie_secret = binascii.a2b_hex('{{ jupyterhub.cookie_secret_hex }}')
c.JupyterHub.hub_ip = jupyter_client.localinterfaces.public_ips()[0]
c.JupyterHub.ip = '0.0.0.0'
c.JupyterHub.port = {{ jupyterhub.port }}
c.ConfigurableHTTPProxy.auth_token = '{{ jupyterhub.proxy_auth_token }}'

c.DockerSpawner.http_timeout = 60
# https://github.com/radiasoft/rsconf/issues/54
c.DockerSpawner.image_whitelist = []
c.DockerSpawner.image = '{{ jupyterhub.jupyter_docker_image }}'
c.DockerSpawner.remove = True
c.DockerSpawner.use_internal_ip = True
c.DockerSpawner.volumes = {
    '{{ jupyterhub.user_d }}/{username}': {
        # POSIT: notebook_dir in
        # radiasoft/container-beamsim-jupyter/container-conf/build.sh
        # parameterize anyway, because matches above
        'bind': '{{ jupyterhub.home_d }}/jupyter',
    },
}

{% if 'rsdockerspawner_cfg' in jupyterhub %}
# Allow JupyterHub to restart without killing containers
c.JupyterHub.cleanup_servers = False
c.DockerSpawner.network_name = 'host'
c.RSDockerSpawner.cfg = '''{{ rsdockerspawner_cfg }}'''
#c.RSDockerSpawner.cfg = {
#    "pools": {
#        "base_port": 9999,
#        "allowed_users": ["a", "b"],
#        "hosts": ["c", "d" ],
#        "servers_per_host": 4,
#        "mem_limit": "10G",
#        "cpu_limit": 4.0,
#    },
#    "tls_dir": "whatever",
#}

import rsdockerspawner
class _Spawner(rsdockerspawner.RSDockerSpawner):
{% else %}
import dockerspawner
class _Spawner(dockerspawner.DockerSpawner):
{% endif %}
    def _volumes_to_binds(self, *args, **kwargs):
        binds = super(_Spawner, self)._volumes_to_binds(*args, **kwargs)
        for v in binds:
            while not os.path.exists(v):
                os.mkdir(v)
                uid = pwd.getpwnam('{{ jupyterhub.jupyter_run_u }}').pw_uid
                gid = grp.getgrnam('{{ jupyterhub.jupyter_run_u }}').gr_gid
                os.chown(v, uid, gid)
                v = os.path.dirname(v)
        return binds
c.JupyterHub.spawner_class = _Spawner

#c.Application.log_level = 'DEBUG'
# Might not want this, but for now it's useful to see everything
#c.JupyterHub.debug_db = True
#c.ConfigurableHTTPProxy.debug = True
#c.JupyterHub.log_level = 'DEBUG'
#c.LocalProcessSpawner.debug = True
#c.Spawner.debug = True
