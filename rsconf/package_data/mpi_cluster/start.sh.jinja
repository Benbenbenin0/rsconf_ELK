#!/bin/bash
set -euo pipefail

# Easier to have these defined here when prototyping
mpi_cluster_ssh_port='{{ mpi_cluster.ssh_port }}'

mpi_cluster_tls_d='{{ mpi_cluster.docker_tls_d }}'

mpi_cluster_guest_d='{{ mpi_cluster.guest_d }}'

mpi_cluster_conf_guest_d=$mpi_cluster_guest_d/.rsmpiexec

mpi_cluster_image='{{ mpi_cluster.docker_image }}'

mpi_cluster_cname=rsmpiexec

mpi_cluster_workers='{{ mpi_cluster.workers }}'

mpi_cluster_jupyter_host_d='{{ mpi_cluster.jupyter_host_d }}'

start_docker() {
    local host=$1
    shift
    local host_d=$1
    shift
    local tls_d=$mpi_cluster_tls_d/$host
    local docker=(
        docker
        --host=tcp://"$host":2376
        --tlsverify
        # POSIT: component.mpi_cluster uses same names
        --tlscacert="$tls_d"/cacert.pem
        --tlscert="$tls_d"/cert.pem
        --tlskey="$tls_d"/key.pem
    )
    "${docker[@]}" rm -f "$mpi_cluster_cname" || true
    local docker_run=(
        "${docker[@]}"
        run
        -d
        --log-driver=json-file
        --log-opt=max-size=1m
        --name="$mpi_cluster_cname"
        --network=host
        --rm
        --ulimit=core=0
        --ulimit=nofile=1024
        --user=vagrant
        -v "$host_d:$mpi_cluster_guest_d"
        "$mpi_cluster_image"
    )
    "${docker_run[@]}" "$@"
}

start_main() {
    local user=$1
    local worker
    local worker_d
    local worker_guest_d
# /home/vagrant/jupyter/.rsmpi
    local prev_d=$PWD
    local ip
    local host_pub slots
    local -i total_slots=0
    local host_d=$mpi_cluster_jupyter_host_d/$user
    local conf_d=$host_d/.rsmpiexec
    # user part must exist
    rm -rf "$conf_d"
    mkdir -p "$conf_d"
    for worker in $mpi_cluster_workers; do
        worker_d=$conf_d/$worker
        worker_guest_d=$mpi_cluster_conf_guest_d/$worker
        mkdir -p "$worker_d"
        cd "$worker_d"
        ssh-keygen -t ed25519 -f ssh_host_ed25519_key -q -N '' -C "$worker"
        ssh-keygen -t ed25519 -f id_ed25519 -q -N '' -C "$worker"
        worker_pub=$(cat ssh_host_ed25519_key.pub)
        cat > sshd_config <<EOF
AuthorizedKeysFile $worker_guest_d/id_ed25519.pub
HostKey $worker_guest_d/ssh_host_ed25519_key
ListenAddress $worker:$mpi_cluster_ssh_port
PasswordAuthentication no
PermitTunnel no
PermitUserEnvironment no
PrintLastLog no
PrintMotd no
Protocol 2
UseDNS no
EOF
        cd "$prev_d"
        ip=$(dig +short "$worker")
        cat >> "$conf_d"/ssh_config <<EOF
Host $ip
    Port $mpi_cluster_ssh_port
    IdentityFile $worker_guest_d/id_ed25519
EOF
        cat >> "$conf_d"/known_hosts <<EOF
[$ip]:$mpi_cluster_ssh_port $worker_pub
EOF
        chmod -R go-rwx .
        start_docker "$worker" "$host_d" /usr/sbin/sshd -D -f "$worker_guest_d/sshd_config"
        slots=$(
            ssh -F "$conf_d"/ssh_config \
            -o IdentityFile="$worker_d"/id_ed25519 \
            -o UserKnownHostsFile="$conf_d"/known_hosts \
            "$ip" nproc
        )
        [[ $slots =~ ^[0-9]+$ ]]
        # ASSUME: hyperthreading so divide by two
        slots=$(( $slots / 2 ))
        total_slots+=$slots
        echo "$ip slots=$slots" >> "$conf_d"/mpi_hosts
    done
    install -m 550 /dev/stdin "$host_d"/rsmpiexec <<EOF
#!/bin/bash
set -euo pipefail

rsmpiexec_main() {
    if (( "\$#" < 3 )); then
        echo "usage: rsmpiexec -n $total_slots command..." 1>&2
        exit 1
    fi
    [[ -d ~/.ssh ]] || install -d -m 700 ~/.ssh
    install -m 600 $mpi_cluster_conf_guest_d/ssh_config ~/.ssh/config
    install -m 600 $mpi_cluster_conf_guest_d/known_hosts ~/.ssh/known_hosts
    exec mpiexec --hostfile "$mpi_cluster_conf_guest_d/mpi_hosts" "\$@"
}

rsmpiexec_main "\$@"
EOF
}

start_main "$@"
